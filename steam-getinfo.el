(require 'url)
(require 'json)

(defun steam-get-steaminfo-gamelist ()
  "Return a list of game objects played by the user."
  (let* ((url-string (format "https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=%s&steamid=%s&include_appinfo=1&format=json" steam_api_key steam_id))
         (json-object-type 'hash-table)
         (json-array-type 'list)
         (json-key-type 'string))
    (with-current-buffer
      (url-retrieve-synchronously url-string)
      (goto-char (point-min))
      (re-search-forward "^$")
      (let* ((json (json-read)))
        (let* ((games (gethash "games" (gethash "response" json))))
          (mapcar (lambda (game)
                    (let* ((name (gethash "name" game))
                          (appid (concat "(" (number-to-string (gethash "appid" game)) ")"))
                          (playtime (concat "‚è≤" (format-seconds "%02h:%02m" (* (gethash "playtime_forever" game) 60))))
                          (nmstr (format "%-60s %s" (concat appid " " name) playtime)))
                      (format "%s" nmstr)
                  games))))))))

(defun steam-get-steaminfo-appid ()
  "Return the user's gameappid"
  (let* ((url-string (format "https://api.steampowered.com/IPlayerService/GetRecentlyPlayedGames/v0001/?key=%s&steamid=%s&format=json" steam_api_key steam_id))
         (json-object-type 'hash-table)
         (json-array-type 'list)
         (json-key-type 'string))
    (with-current-buffer
      (url-retrieve-synchronously url-string)
      (goto-char (point-min))
      (re-search-forward "^$")
      (let* ((json (json-read)))
        (let* ((games (gethash "games" (gethash "response" json))))
          (mapcar (lambda (game)
                    (let ((appid (gethash "appid" game)))
                      (format "%s" appid)))
                  games))))))
